#include <SoftwareSerial.h>
#include <DHT.h>

// DHT Sensor settings
#define DHTPIN 2
#define DHTTYPE DHT11
DHT dht(DHTPIN, DHTTYPE);

// SoftwareSerial settings
const int RX_PIN = 4;
const int TX_PIN = 5;
SoftwareSerial esp8266(RX_PIN, TX_PIN);

// Wi-Fi settings
const char* ssid = "WIFI_NAME";
const char* password = "WIFI_PASSCODE";

// VINDRIKTNING Sensor settings
#define VINDRIKTNING_PIN A0
const int VINDRIKTNING_SAMPLES = 100;

void setup() {
  Serial.begin(9600);
  dht.begin();
  esp8266.begin(9600);
  delay(1000);

  connectToWiFi();
}

void loop() {
  // Reading temperature and humidity from DHT11 sensor
  float humidity = dht.readHumidity();
  float temperature = dht.readTemperature();

  // Reading PM2.5 from VINDRIKTNING sensor
  float pm25 = readPM25();

  // Check if any reads failed and exit early (to try again).
  if (isnan(humidity) || isnan(temperature)) {
    Serial.println("Failed to read from DHT sensor!");
    return;
  }

  // Print the sensor data to the Serial monitor
  Serial.print("Humidity: ");
  Serial.print(humidity);
  Serial.print(" %\t");
  Serial.print("Temperature: ");
  Serial.print(temperature);
  Serial.print(" *C\t");
  Serial.print("PM2.5: ");
  Serial.print(pm25);
  Serial.println(" ug/m3");

  // Wait for 2 seconds before reading the sensors again
  delay(2000);
}

void connectToWiFi() {
  Serial.println("Connecting to Wi-Fi...");

  sendATCommand("AT+RST", "Ready");
  sendATCommand("AT+CWMODE=1", "OK");
  sendATCommand("AT+CWJAP=\"" + String(ssid) + "\",\"" + String(password) + "\"", "WIFI CONNECTED");

  Serial.println("Connected to Wi-Fi");
}

void sendATCommand(String command, String response) {
  esp8266.println(command);

  int response_len = response.length();
  char response_cstr[response_len + 1];
  response.toCharArray(response_cstr, response_len + 1);

  unsigned long startTime = millis();
  while (!esp8266.find(response_cstr)) {
    if (millis() - startTime > 10000) { // Timeout after 10 seconds
      Serial.print("Timeout waiting for: ");
      Serial.println(response);
      Serial.print("Response from ESP8266: ");
      while (esp8266.available()) {
        char c = esp8266.read();
        Serial.write(c);
      }
      Serial.println();
      return;
    }
    Serial.print('.');
    delay(1000);
  }
  Serial.println(response);
}

float readPM25() {
  unsigned long sum = 0;

  for (int i = 0; i < VINDRIKTNING_SAMPLES; i++) {
    sum += analogRead(VINDRIKTNING_PIN);
    delay(10);
  }

  // Calculate the average value
  float average = static_cast<float>(sum) / VINDRIKTNING_SAMPLES;

  // Convert the analog value to PM2.5 concentration (ug/m3) using the formula provided by IKEA
  float pm25 = (average - 380.0)*(1000.0 / 1024.0);

// Return the PM2.5 concentration
return pm25;
}
