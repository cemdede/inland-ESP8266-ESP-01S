#include <SoftwareSerial.h>
#include <DHT.h>

// DHT Sensor settings
#define DHTPIN 2
#define DHTTYPE DHT11
DHT dht(DHTPIN, DHTTYPE);

// SoftwareSerial settings
const int RX_PIN = 4;
const int TX_PIN = 5;
SoftwareSerial esp8266(RX_PIN, TX_PIN);

// Wi-Fi settings
const char* ssid = "Your_WIFI_NAME";
const char* password = "WIFI_PASSWORD";

// VINDRIKTNING Sensor settings
#define VINDRIKTNING_PIN A0
const int VINDRIKTNING_SAMPLES = 100;

// HomeKit state structure
struct {
  float avgPM25;
  float humidity;
  float temperature;
} state;

// HomeKit characteristics
struct {
  float float_value;
} cha_pm25_density = {0};

struct {
  int int_value;
} cha_air_quality = {0};

void my_homekit_report() {
  cha_pm25_density.float_value = state.avgPM25;
  int air_quality_val = 0;
  if (state.avgPM25 >= 150) {
    air_quality_val = 5;
  } else if (state.avgPM25 >= 56) {
    air_quality_val = 4;
  } else if (state.avgPM25 >= 36) {
    air_quality_val = 3;
  } else if (state.avgPM25 >= 13) {
    air_quality_val = 2;
  } else if (state.avgPM25 <= 12) {
    air_quality_val = 1;
  }
  cha_air_quality.int_value = air_quality_val;

}

void setup() {
  Serial.begin(9600);
  dht.begin();
  esp8266.begin(9600);
  delay(1000);

  connectToWiFi();
  startWebServer();
}

void loop() {
  // Reading temperature and humidity from DHT11 sensor
  float humidity = dht.readHumidity();
  float temperature = dht.readTemperature();

  // Reading PM2.5 from VINDRIKTNING sensor
  float pm25 = readPM25();

  // Check if any reads failed and exit early (to try again).
  if (isnan(humidity) || isnan(temperature)) {
    Serial.println("Failed to read from DHT sensor!");
    return;
  }

  // Print the sensor data to the Serial monitor
  Serial.print("Humidity: ");
  Serial.print(humidity);
  Serial.print(" %\t");
  Serial.print("Temperature: ");
  Serial.print(temperature);
  Serial.print(" *C\t");
  Serial.print("PM2.5: ");
  Serial.print(pm25);
  Serial.println(" ug/m3");

  // Update HomeKit values
  state.avgPM25 = pm25;
  state.humidity = humidity;
  state.temperature = temperature;
  my_homekit_report();

  // Print the air quality value to the Serial monitor
  Serial.print("Air Quality: ");
  Serial.println(cha_air_quality.int_value);
  
  // Wait for 2 seconds before reading the sensors again
  delay(2000);
  
    // Add the following code at the end of the loop function
  if (esp8266.available()) {
    if (esp8266.find("+IPD,")) {
      int connectionId = esp8266.read() - 48;
      if (esp8266.find("GET / ")) {
        handleRoot();
      } else {
        esp8266.println("AT+CIPCLOSE=" + String(connectionId));
      }
    }
  }
}

void sendATCommand(String command, String response, int retries = 3); // Add function prototype

void connectToWiFi() {
  Serial.println("Connecting to Wi-Fi...");

  sendATCommand("AT+RST", "Ready");
  sendATCommand("AT+CWMODE=1", "OK");
  sendATCommand("AT+CWJAP=\"" + String(ssid) + "\",\"" + String(password) + "\"", "WIFI CONNECTED");

  Serial.println("Connected to Wi-Fi");
  sendATCommand("AT+CIFSR", "OK");

  // Print IP address
  Serial.println("IP address:");
  while (esp8266.available()) {
    char c = esp8266.read();
    Serial.write(c);
  }
  Serial.println();
}

void sendATCommand(String command, String response, int retries = 3) {
  while (retries > 0) {
    esp8266.println(command);

    int response_len = response.length();
    char response_cstr[response_len + 1];
    response.toCharArray(response_cstr, response_len + 1);

    unsigned long startTime = millis();
    while (!esp8266.find(response_cstr)) {
      if (millis() - startTime > 20000) { // Timeout after 20 seconds
        Serial.print("Timeout waiting for: ");
        Serial.println(response);
        Serial.print("Response from ESP8266: ");
        while (esp8266.available()) {
          char c = esp8266.read();
          Serial.write(c);
        }
        Serial.println();
        retries--;
        delay(1000); // Add a delay before retrying
        break;
      }
      Serial.print('.');
      delay(1000);
    }

    if (retries > 0) {
      Serial.println(response);
      return;
    }
  }

  Serial.print("Failed to get a response for: ");
  Serial.println(command);
}

void startWebServer() {
  sendATCommand("AT+CIPMUX=1", "OK");
  sendATCommand("AT+CIPSERVER=1,80", "OK");
  Serial.println("Web server started");
}

void handleRoot() {
  String html = "<html><head><title>Air Quality Monitor</title><meta http-equiv='refresh' content='5'></head><body>";
  html += "<h1>Air Quality Monitor</h1>";
  html += "<p>Humidity: " + String(state.humidity) + " %</p>";
  html += "<p>Temperature: " + String(state.temperature) + " &deg;C</p>";
  html += "<p>PM2.5: " + String(state.avgPM25) + " ug/m3</p>";
  html += "<p>Air Quality: " + String(cha_air_quality.int_value) + "</p>";
  html += "</body></html>";

  String httpResponse = "HTTP/1.1 200 OK\r\nContent-Type: text/html\r\nConnection: close\r\nContent-Length: ";
  httpResponse += html.length();
  httpResponse += "\r\n\r\n";
  httpResponse += html;

  esp8266.println("AT+CIPSEND=0," + String(httpResponse.length()));
  if (esp8266.find(">")) {
    esp8266.print(httpResponse);
    esp8266.find("SEND OK");
  }
  esp8266.println("AT+CIPCLOSE=0");
}

float readPM25() {
  unsigned long sum = 0;

  for (int i = 0; i < VINDRIKTNING_SAMPLES; i++) {
    sum += analogRead(VINDRIKTNING_PIN);
    delay(10);
  }

  // Calculate the average value
  float average = static_cast<float>(sum) / VINDRIKTNING_SAMPLES;

  // Convert the analog value to PM2.5 concentration (ug/m3) using the formula provided by IKEA
  float pm25 = (average - 380.0)*(1000.0 / 1024.0);

  // Return the PM2.5 concentration
  return pm25;
}
